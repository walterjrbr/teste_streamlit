#!/usr/bin/env python
# coding: utf-8

# In[4]:


# %%writefile app_bignumber.py


# In[31]:


get_ipython().run_cell_magic('writefile', 'app_bignumber.py', '\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Configura√ß√£o da p√°gina\nst.set_page_config(layout="wide", page_title="Dashboard de Infraestrutura")\n\n# Simula√ß√£o inicial de dados\nnp.random.seed(42)\ntime_series = pd.date_range(start="10:00", periods=50, freq="T")\ncpu_usage = np.random.uniform(30, 60, 50)  # Ajustado para valores mais realistas\nmem_usage = np.random.uniform(40, 70, 50)\ndisk_usage = np.random.uniform(20, 85, 50)\ntps = np.random.uniform(100, 500, 50)  # Transa√ß√µes por segundo\n\n# Criar DataFrame\ndf = pd.DataFrame({\n    "Tempo": time_series,\n    "CPU (%)": cpu_usage,\n    "Mem√≥ria (%)": mem_usage,\n    "Disco (%)": disk_usage,\n    "TPS": tps\n})\n\n# Configura√ß√£o do TPS din√¢mico\nst.sidebar.markdown("## ‚öôÔ∏è **Simula√ß√£o de Carga**")\nuser_tps = st.sidebar.slider("Ajuste o TPS (Transa√ß√µes por Segundo)", 50, 1500, int(tps[-1]))\n\n# C√°lculo din√¢mico do impacto no sistema\nimpact_message = ""\nimpact_color = "white"\n\n# Ajustando CPU e Mem√≥ria com uma curva mais realista\ntps_base = tps[-1]  # √öltimo valor hist√≥rico como refer√™ncia\n\nif user_tps > tps_base * 1.5:  # Aumento maior que 50%\n    cpu_impact = min(100, cpu_usage[-1] * 1.8)  # CPU entre 90-100%\n    mem_impact = min(100, mem_usage[-1] * 1.7)  # Mem√≥ria entre 85-100%\n    impact_message = "ALTA DEMANDA! Sistema pr√≥ximo do limite operacional."\n    impact_color = "red"\nelif user_tps > tps_base * 1.3:  # Aumento entre 30-50%\n    cpu_impact = min(90, cpu_usage[-1] * 1.5)  # CPU entre 80-90%\n    mem_impact = min(90, mem_usage[-1] * 1.4)  # Mem√≥ria entre 75-90%\n    impact_message = "SISTEMA SOB CARGA! Monitoramento recomendado."\n    impact_color = "orange"\nelif user_tps < tps_base * 0.7:  # Queda maior que 30%\n    cpu_impact = max(20, cpu_usage[-1] * 0.7)\n    mem_impact = max(20, mem_usage[-1] * 0.65)\n    impact_message = "QUEDA NAS TRANSA√á√ïES! Poss√≠vel desperd√≠cio de recursos."\n    impact_color = "blue"\nelse:\n    cpu_impact = cpu_usage[-1]\n    mem_impact = mem_usage[-1]\n    impact_message = "Sistema operando dentro da normalidade."\n    impact_color = "green"\n\n# Valores finais\nlatest_cpu = round(cpu_impact, 1)\nlatest_mem = round(mem_impact, 1)\nlatest_disk = round(disk_usage[-1], 1)\nlatest_tps = user_tps\n\n# Layout do Dashboard\nst.markdown("## üìä **Dashboard de Infraestrutura - Monitoramento em Tempo Real**")\nst.markdown("### üìå Vis√£o geral do sistema")\n\n# Criando colunas para os medidores circulares\ncol1, col2, col3, col4 = st.columns(4)\n\n# Fun√ß√£o para criar gauge (rel√≥gio circular)\ndef create_gauge(title, value, color):\n    fig = go.Figure(go.Indicator(\n        mode="gauge+number",\n        value=value,\n        title={"text": title, "font": {"size": 20}},\n        gauge={\n            "axis": {"range": [0, 110]},  # Ajustado para at√© 110% para simular sobrecarga\n            "bar": {"color": color},\n            "steps": [\n                {"range": [0, 50], "color": "lightgray"},\n                {"range": [50, 75], "color": "yellow"},\n                {"range": [75, 100], "color": "red"},\n                {"range": [100, 110], "color": "darkred"}  # Representa sobrecarga extrema\n            ],\n        },\n    ))\n    fig.update_layout(height=250)\n    return fig\n\n# Exibir os medidores circulares\nwith col1:\n    st.plotly_chart(create_gauge("CPU (%)", latest_cpu, "red"), use_container_width=True)\n\nwith col2:\n    st.plotly_chart(create_gauge("Mem√≥ria (%)", latest_mem, "blue"), use_container_width=True)\n\nwith col3:\n    st.plotly_chart(create_gauge("Disco (%)", latest_disk, "green"), use_container_width=True)\n\nwith col4:\n    st.plotly_chart(create_gauge("TPS", latest_tps, "purple"), use_container_width=True)\n\n# Gr√°ficos de Tend√™ncias\nst.markdown("---")\nst.markdown("### üìà **Tend√™ncias de Utiliza√ß√£o**")\n\nfig = px.line(df, x="Tempo", y=["CPU (%)", "Mem√≥ria (%)", "Disco (%)", "TPS"], \n              labels={"value": "Uso (%)", "variable": "Recurso"}, \n              title="Evolu√ß√£o do Uso dos Recursos do Sistema",\n              template="plotly_dark")\n\nfig.update_layout(height=400, width=1000)\nst.plotly_chart(fig, use_container_width=True)\n\n# üî• Impacto no Neg√≥cio\nst.markdown("---")\nst.markdown("## **Impacto no Neg√≥cio**")\n\nst.markdown(f"<h3 style=\'color: {impact_color}; text-align: center;\'>{impact_message}</h3>", unsafe_allow_html=True)\n\n# Atualiza√ß√£o din√¢mica\nif st.button("üîÑ Atualizar Dados"):\n    st.experimental_rerun()\n')


# In[32]:


get_ipython().system('streamlit run app_bignumber.py')


# In[33]:


get_ipython().run_cell_magic('writefile', 'app_bignumber_complexo.py', '\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Configura√ß√£o da p√°gina\nst.set_page_config(layout="wide", page_title="Dashboard Avan√ßado de Infraestrutura e Neg√≥cios")\n\n# Simula√ß√£o inicial de dados\nnp.random.seed(42)\ntime_series = pd.date_range(start="10:00", periods=50, freq="T")\n\ncpu_usage = np.random.uniform(30, 60, 50)\nmem_usage = np.random.uniform(40, 70, 50)\ndisk_usage = np.random.uniform(20, 85, 50)\ntps = np.random.uniform(100, 500, 50)\nlatency = np.random.uniform(50, 200, 50)\niops = np.random.uniform(500, 1500, 50)\nnetwork = np.random.uniform(100, 1000, 50)\nerrors = np.random.uniform(0, 5, 50)\n\n# Criar DataFrame\ndf = pd.DataFrame({\n    "Tempo": time_series,\n    "CPU (%)": cpu_usage,\n    "Mem√≥ria (%)": mem_usage,\n    "Disco (%)": disk_usage,\n    "TPS": tps,\n    "Lat√™ncia (ms)": latency,\n    "IOPS": iops,\n    "Rede (Mbps)": network,\n    "Erros": errors\n})\n\n# Configura√ß√£o do TPS din√¢mico\nst.sidebar.markdown("## ‚öôÔ∏è **Simula√ß√£o de Carga**")\nuser_tps = st.sidebar.slider("Ajuste o TPS (Transa√ß√µes por Segundo)", 50, 1500, int(tps[-1]))\n\n# Ajustando CPU e Mem√≥ria com base no TPS\ntps_base = tps[-1]\nif user_tps > tps_base * 1.5:\n    cpu_impact = min(100, cpu_usage[-1] * 1.8)\n    mem_impact = min(100, mem_usage[-1] * 1.7)\n    impact_message = "ALTA DEMANDA! Sistema pr√≥ximo do limite operacional."\n    impact_color = "red"\nelif user_tps > tps_base * 1.3:\n    cpu_impact = min(90, cpu_usage[-1] * 1.5)\n    mem_impact = min(90, mem_usage[-1] * 1.4)\n    impact_message = "SISTEMA SOB CARGA! Monitoramento recomendado."\n    impact_color = "orange"\nelse:\n    cpu_impact = cpu_usage[-1]\n    mem_impact = mem_usage[-1]\n    impact_message = "Sistema operando dentro da normalidade."\n    impact_color = "green"\n\n# Criando colunas para os indicadores\nst.markdown("## üìä **Dashboard Avan√ßado - Infraestrutura e Neg√≥cios**")\ncol1, col2, col3, col4, col5, col6 = st.columns(6)\n\n# Fun√ß√£o para criar gauge (rel√≥gio circular)\ndef create_gauge(title, value, color):\n    fig = go.Figure(go.Indicator(\n        mode="gauge+number",\n        value=value,\n        title={"text": title, "font": {"size": 20}},\n        gauge={\n            "axis": {"range": [0, 110]},\n            "bar": {"color": color},\n            "steps": [\n                {"range": [0, 50], "color": "lightgray"},\n                {"range": [50, 75], "color": "yellow"},\n                {"range": [75, 100], "color": "red"},\n                {"range": [100, 110], "color": "darkred"}\n            ],\n        },\n    ))\n    fig.update_layout(height=250)\n    return fig\n\nwith col1:\n    st.plotly_chart(create_gauge("CPU (%)", round(cpu_impact, 1), "red"), use_container_width=True)\n\nwith col2:\n    st.plotly_chart(create_gauge("Mem√≥ria (%)", round(mem_impact, 1), "blue"), use_container_width=True)\n\nwith col3:\n    st.plotly_chart(create_gauge("Disco (%)", round(disk_usage[-1], 1), "green"), use_container_width=True)\n\nwith col4:\n    st.plotly_chart(create_gauge("TPS", user_tps, "purple"), use_container_width=True)\n\nwith col5:\n    st.plotly_chart(create_gauge("Lat√™ncia (ms)", round(latency[-1], 1), "orange"), use_container_width=True)\n\nwith col6:\n    st.plotly_chart(create_gauge("Erros", round(errors[-1], 1), "gray"), use_container_width=True)\n\n# Gr√°ficos de Tend√™ncias\nst.markdown("---")\nst.markdown("### üìà **Tend√™ncias de Utiliza√ß√£o**")\nfig = px.line(df, x="Tempo", y=["CPU (%)", "Mem√≥ria (%)", "Disco (%)", "TPS", "Lat√™ncia (ms)", "Erros"],\n              labels={"value": "Uso (%)", "variable": "Recurso"},\n              title="Evolu√ß√£o do Uso dos Recursos do Sistema",\n              template="plotly_dark")\nst.plotly_chart(fig, use_container_width=True)\n\n# Heatmap de Correla√ß√£o\nst.markdown("---")\nst.markdown("### üîç **Correla√ß√£o entre M√©tricas**")\ncorrelation_matrix = df.drop(columns=["Tempo"]).corr()\nfig_corr = px.imshow(correlation_matrix, text_auto=True, title="Matriz de Correla√ß√£o", template="plotly_dark")\nst.plotly_chart(fig_corr, use_container_width=True)\n\n# Impacto nos Neg√≥cios\nst.markdown("---")\nst.markdown("## **Impacto nos Neg√≥cios**")\nst.markdown(f"<h3 style=\'color: {impact_color}; text-align: center;\'>{impact_message}</h3>", unsafe_allow_html=True)\n\n# Simula√ß√£o din√¢mica\nif st.button("üîÑ Atualizar Dados"):\n    st.experimental_rerun()\n')


# In[35]:


get_ipython().system('streamlit run app_bignumber_complexo.py')


# In[ ]:


nbconvert 

